from parse import *
import logging
import matplotlib.pyplot as plt

real_conv_data = [
    0.1424419575373538,
    0.1558009629453165,
    0.1701263089204241,
    0.18548328874424044,
    0.20265355627320128,
    0.22064838467219694,
    0.24033524182486138,
    0.26178688310208004,
    0.2851096432766855,
    0.31044716756811813,
    0.3378479595569683,
    0.36712919805485716,
    0.39912477154347165,
    0.43256425931581227,
    0.46867704058760973,
    0.5068698792577983,
    0.548185602309069,
    0.5921074600559023,
    0.6392865197916063,
    0.6889485897490668,
    0.7413231291749224,
    0.7976619035528687,
    0.8572877282769719,
    0.9202752242404479,
    0.9873575417191423,
    1.058312683555738,
    1.1319802948607285,
    1.210065463044096,
    1.2923331322922103,
    1.3779867245699926,
    1.4674534444911034,
    1.5624215897645506,
    1.6621374893688547,
    1.765828817059232,
    1.874624213845571,
    1.9881561718287848,
    2.1072417897895863,
    2.230323356582095,
    2.3587067378375877,
    2.4919124943171527,
    2.6305189379432132,
    2.775074532280905,
    2.9255177150933256,
    3.0819100486173774,
    3.2434978618315813,
    3.4117679760332615,
    3.586847246740886,
    3.7675305465290188,
    3.952900038411105,
    4.14599838930802,
    4.3450906634524955,
    4.550438033970789,
    4.762988186206738,
    4.982875437768134,
    5.209560652701491,
    5.442777061313563,
    5.6834966007384855,
    5.931187597112097,
    6.187260385316176,
    6.450233740620387,
    6.719460326776085,
    6.996434427169914,
    7.280730702710548,
    7.5733490733670745,
    7.8741794733220045,
    8.182649187219903,
    8.498456000443248,
    8.820861166149202,
    9.150450458349509,
    9.489456907273652,
    9.836108266707758,
    10.190883975890735,
    10.55238862411945,
    10.922194846718424,
    11.300977962771263,
    11.68889467615372,
    12.082411687572021,
    12.485416745562716,
    12.898551589807457,
    13.3156879794509,
    13.741622172404485,
    14.174160314407672,
    14.615022417049083,
    15.063521968111134,
    15.518618006133464,
    15.981506330929857,
    16.45288091680722,
    16.932060848114954,
    17.41824581577333,
    17.91064297279192,
    18.41196665416145,
    18.918967119982373,
    19.434097532119164,
    19.956208728816296,
    20.48338295311812,
    21.01892964163876,
    21.56277044244034,
    22.11068927505616,
    22.66599557610035,
    23.22478480733539,
    23.792022989204785,
    24.363923111377844,
    24.943162198398678,
    25.529117165808934,
    26.12085152139876,
    26.714953224825855,
    27.31481939225387,
    27.918970664474806,
    28.52730070671583,
    29.140968008344114,
    29.759494995643077,
    30.380702738530818,
    31.00653138023095,
    31.639460199920567,
    32.274556756558106,
    32.91230795147179,
    33.552616777500454,
    34.19670328624817,
    34.84318699119044,
    35.493342044078936,
    36.145472685115315,
    36.80169628214458,
    37.45687891771349,
    38.114915802447904,
    38.7766221696062,
    39.438927369432555,
    40.10225860654063,
    40.76645731153234,
    41.431030986512454,
    42.093783911698104,
    42.75977538364933,
    43.427443960175566,
    44.09114830174972,
    44.75577048031043,
    45.41753281313864,
    46.07952460521349,
    46.74230737875643,
    47.40256610058635,
    48.06245544899484,
    48.7183842934959,
    49.372930785950146,
    50.0270668634917,
    50.67807259456285,
    51.327490766130836,
    51.9725380188787,
    52.61577198392142,
    53.25523572833441,
    53.89187507193919,
    54.52639145113197,
    55.15568996436664,
    55.78092350444338,
    56.40233458926514,
    57.01730029443537,
    57.62990424833533,
    58.23664673107318,
    58.83934103035408,
    59.43650965249234,
    60.029620763561994,
    60.61904187146213,
    61.20183850956703,
    61.78058696421497,
    62.351453587016984,
    62.920962109562474,
    63.482208233706636,
    64.03728694102652,
    64.58716830313391,
    65.12910254011382,
    65.66684681393967,
    66.19705624307305,
    66.72201795789103,
    67.24022834739529,
    67.75376933450659,
    68.26068771734496,
    68.75838109225955,
    69.25046670704897,
    69.736452063818,
    70.21643043868315,
    70.69005484449096,
    71.15643542708985,
    71.61722503926454,
    72.07069434181477,
    72.51694780399103,
    72.95604698803022,
    73.39037789699292,
    73.81703031604371,
    74.23834174466258,
    74.65169298949765,
    75.05918835973759,
    75.46056668225619,
    75.85436538754638,
    76.24239216674631,
    76.6241918324074,
    77.00035388958604,
    77.36801476150505,
    77.73133269743892,
    78.08734711344928,
    78.43758214128007,
    78.78247617867893,
    79.1198577576533,
    79.45230503006378,
    79.77881061385195,
    80.09942114707606,
    80.41359376273797,
    80.72224629782426,
    81.0257537223233,
    81.32243333509311,
    81.61493604336515,
    81.90120231048668,
    82.18223578747144,
    82.45804020536413,
    82.72881704057639,
    82.99634040484443,
    83.25755270706875,
    83.51396875138163,
    83.76641496417541,
    84.01210052404386,
    84.25372111075436,
    84.48979736509892,
    84.72253993103907,
    84.95076606741733,
    85.1750279688435,
    85.39443578116598,
    85.60923761885472,
    85.82001365935446,
    86.02674897848657,
    86.22963012848408,
    86.42928019380534,
    86.62448471941327,
    86.8156559857429,
    87.0038927854468,
    87.18816908124326,
    87.36905758848775,
    87.54528975199555,
    87.71821994097856,
    87.88880330286993,
    88.0557097202481,
    88.2207039772376,
    88.38128627391572,
    88.53860204099333,
    88.69299640010152,
    88.8446521724287,
    88.99371113767197,
    89.14067139029353,
    89.28443600316314,
    89.42585751998577,
    89.563290550066,
    89.69876664722165,
    89.83087361104862,
    89.96212989669291,
    90.09043119496587,
    90.21570288497426,
    90.33976944755722,
    90.4611011544038,
    90.58057853205399,
    90.69779676216207,
    90.81298157293001,
    90.92604341928596,
    91.03802512821262,
    91.14753875109616,
    91.25535661418137,
    91.36021575885057,
    91.46429884623034,
    91.56586161294172,
    91.66504397315953,
    91.76265742909749,
    91.8596123556528,
    91.95410106168734,
    92.04812338713927,
    92.14029697996179,
    92.23123746252391,
    92.32050830260033,
    92.40722337708411,
    92.49328738427457,
    92.57824140567845,
    92.66206118950545,
    92.74409193741761,
    92.825548104452,
    92.90484213110545,
    92.98308959973157,
    93.0599136748196,
    93.13556620188412,
    93.21034753002037,
    93.28367001969423,
    93.3564403147583,
    93.42794018911538,
    93.49877780304516,
    93.56836924805823,
    93.6361063638749,
    93.70304690165648,
    93.76968335929821,
    93.83462592266395,
    93.89911329858106,
    93.96332457719328,
    94.02591285137805,
    94.08805340020352,
    94.14947945397645,
    94.20919109272776,
    94.26795504613523,
    94.32629179492902,
    94.38416962522955,
    94.44100276302504,
    94.49705238144178,
    94.55247145331083,
    94.60661637342824,
    94.66002254670279,
    94.71231686866844,
    94.76527345106138,
    94.81660702902688,
    94.86736042954762,
    94.91788623634405,
    94.96724609168399,
    95.01662460224722,
    95.06493416851515,
    95.11264303659269,
    95.159430336639,
    95.20573633192409,
    95.25180354035088,
    95.29693239104547,
    95.34151277817494,
    95.3855465672616,
    95.42940126620454,
    95.47221500368713,
    95.51491307878521,
    95.55619522243454,
    95.59777025308973,
    95.63868302331764,
    95.67913127848527,
    95.71960751648787,
    95.75899055840486,
    95.79819077913345,
    95.8364918180988,
    95.87467532915733,
    95.9118663823361,
    95.9488018589556,
    95.9854798934935,
    96.02135202238469,
    96.05708050605642,
    96.092271719297,
    96.12703572792392,
    96.16136506984788,
    96.19551718715043,
    96.22829628001782,
    96.26156413973575,
    96.29431711529051,
    96.32651603071314,
    96.358349303759,
    96.3897236583116,
    96.42086295705056,
    96.45178585519919,
    96.4822405072429,
    96.5123145927312,
    96.54188125614564,
    96.5712277879251,
    96.60024039120741,
    96.62863364107602,
    96.65702129437766,
    96.68478586322094,
    96.71257654937683,
    96.73987100659286,
    96.76665431069034,
    96.79310182076837,
    96.81933106473373,
    96.84555098108744,
    96.87093700895946,
    96.89643123712665,
    96.92105240084321,
    96.94614740723169,
    96.97106518899878,
    96.9950949821366,
    97.01912290975211,
    97.0428131778258,
    97.06626839008587,
    97.0897030816003,
    97.11291391043508,
    97.1354885961552,
    97.15772935337817,
    97.17974811344384,
    97.2015896488881,
    97.22288831733422,
    97.24429332055318,
    97.26479167991955,
    97.285894468521,
    97.30665959758062,
    97.32700125307126,
    97.3473130602046,
    97.36738794600198,
    97.38701324091774,
    97.40647623539076,
    97.42574148449675,
    97.44444707690363,
    97.46315080378818,
    97.48168290261833,
    97.50012359085429,
    97.51816505731155,
    97.53609832347364,
    97.55361930920071,
    97.57123543656664,
    97.58884783288791,
    97.6059099001217,
    97.62330589585264,
    97.63987546519121,
    97.65639279990454,
    97.67301646939069,
    97.68931926903602,
    97.70556423748911,
    97.72161519161983,
    97.73740870366896,
    97.75303058766369,
    97.76845286076907,
    97.78358038134624,
    97.79862208789622,
    97.8132030104306,
    97.82793690579605,
    97.84260550787995,
    97.85694764355604,
    97.871147999535,
    97.88542670745186,
    97.89950580447935,
    97.91348229777867,
    97.92702598989734,
    97.94022642590721,
    97.95358543131518,
    97.96665528076194,
    97.9797195336417,
    97.99233046459517,
    98.0049022195797,
    98.01776313052545,
    98.03051770669836,
    98.04302043735667,
    98.0549653768382,
    98.06691591288671,
    98.07907165639158,
    98.09100353721678,
    98.10275259685362,
    98.11442517007491,
    98.12576194927671,
    98.13723118056399,
    98.14828999693857,
    98.15935627540249,
    98.17014832208383,
    98.18129481800794,
    98.1920085127514,
    98.20291808733955,
    98.21312622553148,
    98.2238249960963,
    98.23438944905332,
    98.24482331544722,
    98.25515830915762,
    98.2654000267515,
    98.275238791522,
    98.28494696972938,
    98.29483423808047,
    98.30447525748396,
    98.31417224255735,
    98.32361178554916,
    98.33302894227299,
    98.3424013264609,
    98.3517121484119,
    98.36087745962115,
    98.37004650187504,
    98.37911853696775,
    98.38814206847988,
    98.39699583745994,
    98.40580856494873,
    98.4144552609501,
    98.42331276097482,
    98.43173745981889,
    98.44025170373482,
    98.44882564436531,
    98.45700969082876,
    98.46533365146698,
    98.47335726301,
    98.48161966141133,
    98.4896208866864,
    98.49763143957311,
    98.50567743738412,
    98.51362642803394,
    98.52126014540991,
    98.52898900442474,
    98.53690628119494,
    98.54463887125445,
    98.55219983325954,
    98.55951641183934,
    98.56700648399588,
    98.57449655615241,
    98.58200714905459,
    98.58922858599554,
    98.59641830905689,
    98.60358004928328,
    98.6107567136883,
    98.61794457122733,
    98.62499251459155,
    98.63185577124509,
    98.63879364879182,
    98.64568675380264,
    98.65270111776492,
    98.65928268054655,
    98.66601908168161,
    98.67272563445938,
    98.67929040754004,
    98.68576377002651,
    98.69232294654019,
    98.69864893276255,
    98.70508498480241,
    98.71140723998013,
    98.71774441933648,
    98.7240666745142,
    98.73027513282976,
    98.73653022920358,
    98.7425521352861,
    98.74863187256085,
    98.75471347535795,
    98.76061412248899,
    98.76670132185306,
    98.77258704480548,
    98.7786835717812,
    98.78440326324619,
    98.79013228232284,
    98.79574750453733,
    98.80165374823537,
    98.80753200909844,
    98.81314350026827,
    98.8187176809915,
    98.82437207917492,
    98.82995372198748,
    98.83548872674176,
    98.84106477298731,
    98.84658298804062,
    98.8517989884764,
    98.85701125786753,
    98.86224777904896,
    98.86784434604013,
    98.87308086722155,
    98.8783864127292,
    98.88353711988343,
    98.88874192718524,
    98.89386651702682,
    98.89883440299268,
    98.9038750443294,
    98.90892314775546,
    98.91396192356986,
    98.91904920296484,
    98.92404320624331,
    98.92888610221303,
    98.93409090951482,
    98.93881627757773,
    98.94356962847557,
    98.94834723116371,
    98.95316587534313,
    98.95790989862932,
    98.96286659146118,
    98.96754345594348,
    98.97218300997918,
    98.97678525356827,
    98.98149756297484,
    98.98620800685909,
    98.99064981552776,
    98.99512893464303,
    98.9997535645001,
    99.00422522152606,
    99.00869501302968,
    99.01305473871581,
    99.01748908529517,
    99.02194954918714,
    99.02634658531989,
    99.03083876309148,
    99.03496529848631,
    99.03932129312778,
    99.04381347089938,
    99.04795866151753,
    99.05216914541722,
    99.05643559498684,
    99.06061809605158,
    99.06485283174158,
    99.0688562426626,
    99.07302008850405,
    99.07722870688143,
    99.08118734526653,
    99.08528776334875,
    99.08941429874358,
    99.09339718891897,
    99.09739873431766,
    99.10143012807366,
    99.10551375645488,
    99.10935300141084,
    99.11327992591632,
    99.11717700206452,
    99.12100132284183,
    99.12493757495896,
    99.12876003021394,
    99.13267762710777,
    99.13645530982681,
    99.1401788923983,
    99.14401813735424,
    99.14776410619368,
    99.15162573741759,
    99.15537357177936,
    99.15919229598968,
    99.16290841647182,
    99.1665648402394,
    99.17024924684193,
    99.17392246031048,
    99.17750053214019,
    99.1811476282961,
    99.18471823803648,
    99.18831123404482,
    99.19183707124927,
    99.1953311945741,
    99.19882531789894,
    99.20236607928203,
    99.20583968186122,
    99.20935059488703,
    99.21275703866232,
    99.21629780004541,
    99.21966879889645,
    99.22323008102516,
    99.22653205554998,
    99.22991238201266,
    99.23344195026176,
    99.23673086613024,
    99.24008880632496,
    99.24338331876044,
    99.24686251790662,
    99.25012158541782,
    99.25350377740281,
    99.25690462461112,
    99.26009839884077,
    99.26334067665098,
    99.26663332356414,
    99.26973195615493,
    99.27303579620205,
    99.27623516699869,
    99.27936737899141,
    99.2825704808327,
    99.28564859267786,
    99.28884236690749,
    99.29202494800315,
    99.29507880805801,
    99.29811587841189,
    99.30117533503373,
    99.30430195045948,
    99.30727932409879,
    99.31037795668958,
    99.31337398555219,
    99.31637747650413,
    99.3193772364114,
    99.3223284927381,
    99.32530959742206,
    99.32819929151184,
    99.331266210223,
    99.33416709744678,
    99.33709223646085,
    99.33997073741665,
    99.34287349016275,
    99.34579676365448,
    99.34875921311513,
    99.35156495870004,
    99.35442666995488,
    99.35723428106212,
    99.36007920261598,
    99.36284017566497,
    99.36559741766929,
    99.3683658528076,
    99.37118092600417,
    99.37391205069588,
    99.37671966180312,
    99.37939482082491,
    99.38213713865059,
    99.3849242290122,
    99.38763296743593,
    99.390343571382,
    99.39309148577468,
    99.39581328285473,
    99.3985798524707,
    99.40138559805561,
    99.40401971558613,
    99.40665383311665,
    99.40928421960251,
    99.41198176489226,
    99.41463453764608,
    99.41727984831059,
    99.41978524480031,
    99.42245480725511,
    99.42493222090987,
    99.42753089351612,
    99.43004748313982,
    99.43264988679071,
    99.43515528328042,
    99.43762523484587,
    99.44004295178607,
    99.44267333827193,
    99.44524775908788,
    99.44784270064946,
    99.45034809713917,
    99.45286282124056,
    99.45540552817688,
    99.45782324511707,
    99.46036781757573,
    99.46281351735088,
    99.4652573516037,
    99.46775901704876,
    99.47026441353847,
    99.47263922346508,
    99.47506253697226,
    99.4774653297338,
    99.47973007384292,
    99.48221308406467,
    99.48456737324562,
    99.48690860377027,
    99.48924050668327,
    99.4916544925788,
    99.49405541981803,
    99.49631270183781,
    99.49855505967894,
    99.50092240751621,
    99.50325431042921,
    99.50562538931115,
    99.5080337786397,
    99.51027053991383,
    99.51265281192974,
    99.51488957320389,
    99.51715804835766,
    99.51931272664926,
    99.52167447791955,
    99.52390750814904,
    99.5261703867358,
    99.52832506502742,
    99.5305151882433,
    99.53280418414269,
    99.53503534884985,
    99.53727584116865,
    99.53940813319228,
    99.54159639088584,
    99.54384434529398,
    99.54610535835842,
    99.54834025411023,
    99.55066842597857,
    99.55293876665466,
    99.5551438140492,
    99.55729103025148,
    99.5594587671994,
    99.56165821802693,
    99.5639322897477,
    99.56604219550337,
    99.56822485662993,
    99.57046721447107,
    99.57272636201317,
    99.57495939224265,
    99.57707862560997,
    99.57921464867827,
    99.58137678905919,
    99.5834885603372,
    99.5855872729589,
    99.58770464080389,
    99.5897977568586,
    99.59199720768613,
    99.5940698029952,
    99.59604725666541,
    99.59808627257254,
    99.60021483355152,
    99.6021829596101,
    99.60427980670946,
    99.60639530903212,
    99.60845671120721,
    99.6104378959221,
    99.61242281168164,
    99.61445623102178,
    99.61657732991144,
    99.61868163910013,
    99.62064603411403,
    99.62276526748136,
    99.62468115891467,
    99.62670898168781,
    99.62876851834056,
    99.63090081036421,
    99.63292117104803,
    99.63493406964253,
    99.63681451615156,
    99.6387621214645,
    99.64069480259879,
    99.64261442507676,
    99.64460866844796,
    99.646698053458,
    99.64880609369135,
    99.65079287497322,
    99.65283748744733,
    99.65472353052336,
    99.65661330464405,
    99.65858889279193,
    99.6605327670602,
    99.6625829761013,
    99.6646630334997,
    99.66661623537962,
    99.66853026129061,
    99.67046107690257,
    99.67233406132229,
    99.67421264230899,
    99.6761956925462,
    99.67798286293872,
    99.67988383019339,
    99.68187993908691,
    99.68376038559596,
    99.68555501807779,
    99.68744665772083,
    99.68941664930172,
    99.69128590267677,
    99.69310292142659,
    99.69499269554727,
    99.69688433519029,
    99.69877224378865,
    99.70053889343554,
    99.70232419830573,
    99.70419718272544,
    99.70596569789465,
    99.70786853067166,
    99.70966502867583,
    99.71147085429165,
    99.71331212483176,
    99.71516458850583,
    99.71693870024204,
    99.71870161884426,
    99.72041416834357,
    99.72227036306231,
    99.72403514718687,
    99.72573090698519,
    99.7275665809583,
    99.72935002030616,
    99.7311017457744,
    99.73279190900574,
    99.73449139984872,
    99.73630095650921,
    99.73799858182987,
    99.73975030729811,
    99.7414311429178,
    99.74308959226953,
    99.74481706594747,
    99.74654267410308,
    99.74830372718299,
    99.75005172160657,
    99.75185381617773,
    99.75363539000325,
    99.75535167054723,
    99.75713697541741,
    99.75888123879632,
    99.76056953650534,
    99.7622000030221,
    99.7638938972981,
    99.76562323649839,
    99.76733951704234,
    99.76889722818822,
    99.77062843291084,
    99.77239694808006,
    99.77410949757936,
    99.77576794693108,
    99.77735364091191,
    99.77906619041121,
    99.78072090871828,
    99.78247076866418,
    99.78412735249358,
    99.78583057438122,
    99.78742932701837,
    99.78920716979924,
    99.79086375362863,
    99.79256697551628,
    99.79414334188547,
    99.7957290358663,
    99.79727928492285,
    99.7989825068105,
    99.80060924228262,
    99.80224343984403,
    99.80383099934721,
    99.80542228989503,
    99.80711991521571,
    99.80887164068395,
    99.81038084824924,
    99.81195161805144,
    99.81352798442062,
    99.81521068556263,
    99.81684488312406,
    99.8184380391942,
    99.82014126108186,
    99.82177918968796,
    99.82340965620472,
    99.82494125003798,
    99.8264952301392,
    99.8280659999414,
    99.8297169872038,
    99.83132133640794,
    99.83287904755383,
    99.83448153123562,
    99.83603178029219,
    99.83752046711184,
    99.83918824407522,
    99.84078140014537,
    99.8424155977068,
    99.84411881959446,
    99.84568399282966,
    99.84725849367652,
    99.84883859109036,
    99.85051942671005,
    99.85211071725789,
    99.85374304929697,
    99.8554014986487,
    99.8570524859111,
    99.85855982795407,
    99.86009328730965,
    99.86166778815651,
    99.86322176825773,
    99.86481865537255,
    99.86634651816114,
    99.86791169139634,
    99.86946567149757,
    99.87096928249586,
    99.87252885916408,
    99.87407910822064,
    99.87573569205003,
    99.87731952050854,
    99.87888096269909,
    99.88050769817119,
    99.8820915266297,
    99.8836511032979,
    99.88513792459523,
    99.88668071156246,
    99.88817312942678,
    99.889721512961,
    99.89136317261176,
    99.89290782510133,
    99.89445620863556,
    99.89601018873678,
    99.89764252077588,
    99.89917971117612,
    99.90069264978607,
    99.90222424361933,
    99.90369800626034,
    99.90513818949941,
    99.90680596646278,
    99.90835248447468,
    99.90985236442832,
    99.91141194109653,
    99.91287077955889,
    99.91443968383875,
    99.91595448797104,
    99.91743384717904,
    99.91902886877153,
    99.92061456275236,
    99.92210324957202,
    99.92362365027128,
    99.92514964753755,
    99.92665139301351,
    99.9281475419225,
    99.92958772516157,
    99.93119020884336,
    99.93268635775235,
    99.93425899307687,
    99.93576446959749,
    99.93723077014917,
    99.9386933396562,
    99.94020068169917,
    99.94161661314793,
    99.94308664474428,
    99.94458839022026,
    99.94612184957585,
    99.9475732259489,
    99.94910855082681,
    99.95050955809694,
    99.95193854820201,
    99.9533861935304,
    99.95484503199276,
    99.95628334970951,
    99.95777576757382,
    99.95925139573716,
    99.96077179643643,
    99.96217093818423,
    99.96361858351261,
    99.96498414585847,
    99.96642432909752,
    99.96790741935018,
    99.96926738512904,
    99.97064040956421,
    99.97207872728096,
    99.97356554857828,
    99.97493484196879,
    99.97633771476124,
    99.97774245307603,
    99.97911734303354,
    99.98052767791532,
    99.9819380127971,
    99.9833315579779,
    99.98477733778395,
    99.98618394162108,
    99.98754950396692,
    99.98892812496908,
    99.99023025955569,
    99.99165178757146,
    99.99305466036391,
    99.99447059181267,
    99.99586973356047,
    99.99722037172768,
    99.99864563078809,
    99.99999999999997,
]

#plt.rcParams["figure.figsize"] = (12, 8)
def save_plot(i, description):
    tmp = f'experiments/{description.name}_{i}_plot.png'
    logging.info(f'{i}: "{description.relations[i]}" plot for {description.name}: {tmp}')
    plt.savefig(tmp, dpi=1000, bbox_inches = 'tight')

def create_bandwidth_plot(i, description, configs):
    for conf in configs:
        times, bandwidth = parse_bandwidth(conf.get_data_path("bandwidth"))
        plt.plot(times, bandwidth, label=conf.get_algo_name())

    plt.xlabel("Time in milliseconds")
    plt.ylabel("Bandwidth in bytes")
    plt.legend()

def create_buckets_convdelay_plot(i, description, configs):
    for conf in configs:
        bins, count = parse_buckets(conf.get_data_path("convbuckets"))
        count[0] = 0
        plt.hist(bins[:-1], bins, weights=count, label=conf.get_algo_name(), cumulative=True, density=True, histtype="step")
        print_percentile(f'{conf.get_algo_name()} convdelay', count, bins, percentile=10)
        print_percentile(f'{conf.get_algo_name()} convdelay', count, bins, percentile=50)
        print_percentile(f'{conf.get_algo_name()} convdelay', count, bins, percentile=85)
        print_percentile(f'{conf.get_algo_name()} convdelay', count, bins, percentile=95)
        print_percentile(f'{conf.get_algo_name()} convdelay', count, bins, percentile=100)
                
    bins = []
    for i in range(0, len(real_conv_data)+1):
        bins.append(i * 2.5)
    real_conv_data_m = list(map(lambda x: x / 100, real_conv_data))
    plt.hist(bins[:-1], bins, weights=real_conv_data_m, label="real", histtype="step")

    plt.xlabel("Time in seconds")
    plt.ylabel("%")
    plt.legend()

def create_buckets_waited_plot(i, description, configs):
    for conf in configs:
        bins, count = parse_buckets(conf.get_data_path("waitedbuckets"))
        plt.hist(bins[:-1], bins=100, weights=count, label=conf.get_algo_name(), cumulative=True, density=True, histtype="step")

    plt.xlabel("wait time in seconds")
    plt.ylabel("share of messages (cumulative)")
    plt.legend(loc="lower right")

def create_buckets_bandwidth_plot(i, description, configs):
    for conf in configs:
        bins, count = parse_buckets(conf.get_data_path("bandwidthbuckets"))
        plt.hist(bins[:-1], bins=bins, weights=count, label=conf.get_algo_name(), cumulative=True, density=False, histtype="step")
        print_percentile(f'{conf.get_algo_name()} bandwidth', count, bins, percentile=100)

    plt.xlabel("Time in seconds")
    plt.ylabel("%")
    plt.legend()

def create_convdelay_payment_plot(i, description, configs):
    import numpy as np
    x = np.array([509.75, 509.46, 101.29, 103.2, 1.11, 2.72, 1.72, 1.16, 0.82, 19.25, 20.24, 20.7, 20.54, 312.65, 266.54, 313.45, 267.93])
    y = np.array([602, 592, 171, 161, 5, 3, 1, 2,4, 33, 43, 43, 30, 349, 316, 394, 274])
    m, b = np.polyfit(x, y, 1)
    plt.plot(x, m*x + b, linewidth=1, color="black")
    plt.scatter(x, y, marker='x', color="black")
    plt.xlabel("Convergence delay (seconds)")
    plt.ylabel("Payment attempts with outdated updates")


def create_bandwidth_conns_plot(i, description, configs):
    import numpy as np
    x = [4, 8, 16, 32]
    flood_y = [50.7, 94.7, 180.92, 353.21]
    minisketch_y = [19.15, 19.84, 21.45, 21.46]
    X = np.arange(len(x))
    plt.bar(X-0.2, flood_y, 0.4, label="flooding")
    plt.bar(X+0.2, minisketch_y, 0.4, label="minisketch")

    plt.xticks(X, x)
    plt.xlabel("Number of active gossip connections")
    plt.ylabel("Bandwidth (GB)")
    plt.legend()

def create_reopendelay_plot(i, description, configs):
    for conf in configs:
        bins, count = parse_buckets(conf.get_data_path("reopendelays"))
        plt.hist(bins[:-1], bins=bins, weights=count, label=conf.get_algo_name(), cumulative=True, density=True, histtype="step")

    plt.xlim(left=-100, right=10000)
    plt.xlabel("Timestamp difference")
    plt.ylabel("%")

def create_keepalive_times_plot(i, description, configs):
    for conf in configs:
        bins, count = parse_buckets(conf.get_data_path("keepalive_times"))
        plt.hist(bins[:-1], bins=bins, weights=count, cumulative=False, density=False, histtype="bar")

    plt.yscale("log")
    plt.xlim(left=86000, right=88600)
    plt.xlabel("Timestamp difference")
    plt.ylabel("N")

def create_broadcast_queue_diff_plot(i, description, configs):
    for conf in configs:
        bins, count = parse_buckets(conf.get_data_path("setdiffs"), convert=None)
        plt.hist(bins[:-1], bins=bins, weights=count, cumulative=False, density=True, histtype="step")

    plt.xlabel("set difference")
    plt.ylabel("number of comparisons (once per peer per broadcast)")
    #plt.legend()

def create_relativediffs_plot(i, description, configs):
    for conf in configs:
        bins, count = parse_buckets(conf.get_data_path("relativediffs"), convert=None)
        plt.hist(bins[:-1], bins=bins, weights=count, cumulative=False, density=True, histtype="step", label=conf.get_algo_name())

    plt.xlabel("relative difference in sets")
    plt.ylabel("number of comparisons (once per peer per broadcast)")
    plt.legend()

def create_absolutediffs_plot(i, description, configs):
    for conf in configs:
        bins, count = parse_buckets(conf.get_data_path("absolutediffs"), convert=None)
        plt.hist(bins[:-1], bins=bins, weights=count, cumulative=False, density=True, histtype="step", label=conf.get_algo_name())

    plt.xlabel("absolute difference in sets")
    plt.ylabel("number of comparisons (once per peer per broadcast)")
    plt.legend()

def create_capacities_plot(i, description, configs):
    for conf in configs:
        bins, count = parse_buckets(conf.get_data_path("capacities"), convert=None)
        plt.hist(bins[:-1], bins=bins, weights=count, cumulative=False, density=True, histtype="step", label=conf.get_algo_name())

    plt.xlabel("estimated set difference")
    plt.ylabel("number of comparisons (once per peer per broadcast)")
    plt.legend()

def create_timeseen_plot(i, description, configs):
    for conf in configs:
        bins_past, count_past = parse_buckets(conf.get_data_path("timeseen_past"))
        bins_future, count_future = parse_buckets(conf.get_data_path("timeseen_future"))
        bins = bins_past if len(bins_past) > len(bins_future) else bins_future
        plt.hist(
            (bins_past[:-1], bins_future[:-1]),
            bins=bins,
            weights=(count_past, count_future),
            label=["timestamp < time first seen", "timestamp > time first seen"],
            density=True,
            cumulative=False,
            histtype="step",
        )

    #plt.yscale("log")
    #plt.xscale("log")
    plt.xlabel("Time in seconds")
    plt.ylabel("%")
    plt.legend()

def create_catalog(i, description, configs):
    for conf in configs:
        bins_updates, count_updates = parse_buckets(conf.get_data_path("channel_updates"))
        bins_nodes, count_nodes = parse_buckets(conf.get_data_path("node_announcements"))
        bins_channels, count_channels = parse_buckets(conf.get_data_path("channel_announcements"))
        counts, _, _ = plt.hist(
            (bins_updates[:-1], bins_nodes[:-1], bins_channels[:-1]),
            bins=bins_updates,
            weights=(count_updates, count_nodes, count_channels),
            #color=["red", "green", "orange"],
            label=["channel updates", "node announcements", "channel announcements"],
            stacked=True,
            density=True,
            cumulative=True,
            histtype="bar",
        )

    print(counts)
    #plt.xlim(left=100000, right=118000)
    plt.xlabel("Time in seconds")
    plt.ylabel("%")
    plt.legend()

def create_update_catalog(i, description, configs):
    for conf in configs:
        bins_updates, _ = parse_buckets(conf.get_data_path("channel_updates"))
        bins_keepalive, count_keepalive = parse_buckets(conf.get_data_path("keepalive"))
        bins_closures, count_closures = parse_buckets(conf.get_data_path("closures"))
        bins_reopens, count_reopens = parse_buckets(conf.get_data_path("reopens"))
        bins_disruptive, count_disruptive = parse_buckets(conf.get_data_path("disruptive"))
        bins_nondisruptive, count_nondisruptive = parse_buckets(conf.get_data_path("nondisruptive"))
        bins_misc, count_misc = parse_buckets(conf.get_data_path("misc"))

        counts, _, _ = plt.hist(
            (bins_keepalive[:-1], bins_closures[:-1], bins_reopens[:-1], bins_disruptive[:-1], bins_nondisruptive[:-1], bins_misc[:-1]),
            bins=bins_updates,
            weights=(count_keepalive, count_closures, count_reopens, count_disruptive, count_nondisruptive, count_misc),
            label=["keep alive", "closures", "reopens", "disruptive", "non disruptive", "misc"],
            stacked=True,
            density=True,
            cumulative=True,
            histtype="bar",
        )

    print(counts)
    plt.xlabel("Time in seconds")
    plt.ylabel("% of updates received")
    plt.legend()

def create_convdelay_plot(i, description, configs, cum=False):
    for conf in configs:
        times = parse_convdelay(conf.get_data_path("first_seen"))
        plt.hist(times, bins=1000, histtype="step", label=conf.get_algo_name(), density=cum, cumulative=cum)

    plt.xlabel("Time in milliseconds")
    plt.ylabel("%")
    plt.legend()
 
def create_cum_convdelay_plot(i, description, configs):
    create_convdelay_plot(i, description, configs, cum=True)     
    plt.ylabel("N")
    plt.legend()


def create_waited_plot(i, description, configs):
    assert(len(configs) < 2)
    for conf in configs:
        waited, not_dropped, dropped = parse_waited(conf.get_data_path("waited"))
        plt.hist(waited, bins=200, histtype="step", label=f'All')
        plt.hist(not_dropped, bins=200, histtype="step", label=f'Broadcast')
        plt.hist(dropped, bins=200, histtype="step", label=f'Dropped')

    plt.xlabel("Time in milliseconds")
    plt.ylabel("Num")
    plt.legend()

def create_payments_plot(i, description, configs):
    for conf in configs:
        print(conf.get_algo_name())
        failure_times = parse_payments(conf.get_data_path("payments"))
        conv_times = failure_times["CONV-FEEUP"] + \
            failure_times["CONV-FEEDOWN"] + \
            failure_times["CONV-CLTVUP"] + \
            failure_times["CONV-CLTVDOWN"] + \
            failure_times["CONV-DISABLED"] + \
            failure_times["CONV-OKOLD"]

        plt.hist(conv_times, bins=100, histtype="step", label=conf.get_algo_name(), cumulative=True)

    plt.xlabel("Time in milliseconds")
    plt.ylabel("N")
    plt.legend()

def create_payments_catalog_plot(i, description, configs):
    for conf in configs:
        failure_times = parse_payments(conf.get_data_path("payments"))
        times = []
        labels = []
        for t in failure_times:
            if "CONV" in t:
                times.append(failure_times[t])
                labels.append(t)

        plt.hist(times, bins=100, histtype="bar", label=labels, density=False, cumulative=False, stacked=True)

    plt.xlabel("Time in milliseconds")
    plt.ylabel("N")
    plt.legend()

function_map = {
    "bandwidth": create_bandwidth_plot,
    "bandwidth_buckets": create_buckets_bandwidth_plot,
    "convdelay": create_convdelay_plot,
    "convdelay_cum": create_cum_convdelay_plot,
    "convdelay_buckets": create_buckets_convdelay_plot,
    "waited_buckets": create_buckets_waited_plot,
    "waited": create_waited_plot,
    "payments": create_payments_plot,
    "convfailures": create_payments_catalog_plot,
    "catalog": create_catalog,
    "update_catalog": create_update_catalog,
    "keepalive_times": create_keepalive_times_plot,
    "timeseen": create_timeseen_plot,
    "relativediffs": create_relativediffs_plot,
    "absolutediffs": create_absolutediffs_plot,
    "capacities": create_capacities_plot,
    "reopen": create_reopendelay_plot,
    "bandwidth_conns": create_bandwidth_conns_plot,
    "convdelay_payments": create_convdelay_payment_plot,
}

def create_plots(plot_description):
    logging.info(f'Creating plots for {plot_description}')
    i = 0
    for confs in plot_description.relation_configs():
        plt.figure()
        function_map[plot_description.name](i, plot_description, confs)
        save_plot(i, plot_description)
        i += 1

